HISTORY OF LINUX:
========================
--> 1969: Ken Thompson and Dennis Ritchie at AT&Tâ€™s Bell Labs created UNIX, a powerful, multiuser operating system.
--> UNIX became popular in universities and was the inspiration for many later operating systems, including Linux.
--> Linux was discovered by Linus Torvalds in 1991.
--> Linux is a Free, Open-source, Kernel operating System. Which uses the Systems, Services, Embedded System and Mobiles devices.
--> Linux is a Case-sensitive Operating System.

REQUIREMENTS TO LEARN LINUX:
================================
--> We need a good condition Laptop with Network.
--> To Connect Server we use Git Bash, PowerShell, Mobilex, Putty, Eclipse.
--> We need a AWS Account to create Instances.

Components of LINUX:
====================
-- Hardware
-- Kernel
-- Shell
-- System Libraries
-- User Application

TOPICS TO COVER IN LINUX:
===============================
-- Linux Documentation
-- Components of Linux
-- Basic Linux Commands
-- File Systems
-- Vi Editor
-- User & Group Management
-- Process Management
-- Package Management
-- Networking in Linux
-- Security & Permissions
-- System Monitoring & Performance
-- Cron Jobs & Scheduling
-- Linux Boot Process & Patching
-- Linux Kernel System
-- Backup & Recovery
-- Important Port Numbers
-- Disk Management

LINUX DOCUMENTATION
== ** ===== ** ===============
--> There are two Essential tools for finding help and understanding how commands works in detail.

1) manual Pages (man)

Syntax:
-------

man [command name]

Ex:
---
man ls     # Shows the manual for the 'ls' command

Common Manual Page Sections:
----------------------------
Each man page may include:-

NAME - What the command does
SYNOPSIS - How to use it (Syntax)
DESCRIPTION - Detailed Explanation
OPTIONS - Lists of Flags/Switches
EXAMPLES - Sample Usage
SEE ALSO - Related Commands


2) --help 
--> Print a Quick Summary of options and Usage for a command

Syntax:
-------
command name --help

Ex:
---

ls --help       # Shows all available flags for 'ls'

When to use:
------------
When we need a quick overview of what options a command supports, without reading a full man page.

Difference Between man & Help:
------------------------------ 
--------------------------------------------------------------------------------------------
|    Feature            |  man                               |    Help                     |
|-------------------------------------------------------------------------------------------                                                  
| -   Detail            | Very Detail(Official manual)       |   Quick & Concise           |
| -   Internet Needed   | No                                 |   No                        |
| -   Formatting        | Paginated, Organised               |   Plain Text                |
| -   Ideal Use Case    | Deep Understanding                 |   Quick Usage/ Flag Reference|
---------------------------------------------------------------------------------------------

DIRECTORIES UNDER /:
====================
	In Linux, the  / directory is known as the root directory. It is the top-level directory in the Linux File System hierarchy.
Every file and directory start from here - it is the parent of all directories.

Key Points about /(Root Directories):
=====================================
--> / is the base of entire Linux File System.
--> Everything - files, devices, mounted drives - is located under /.
--> Not to be confused with /root (Which is the home directory of root user).

common directories under /:
===========================

Directory                             Description
/bin                                  Essential binary executables (Ex:- ls, cp)
/boot                                 Boot loader files(Ex:- vmlinuz, initrd)
/dev                                  Device Files(EX:- /dev/sda, /dev/null) 
/etc                                  System Configuration files.
/home                                 User home directories(Ex:- /home/filenames)
/lib                                  Essential Shared Files for /bin and /sbin
/media                                Mount point for removable media (USB drives)
/mnt                                  Temporary Mount point for filesystems.
/opt                                  Optional software packages.
/proc                                 Virtual filesystem providing process Info.
/root                                 Home directory of the root user.
/run                                  Running system data (Ex:- PIDs, sockets)
/sbin                                 system binaries(used by root user)
/srv                                  Data for services (Ex:- web servers)
/sys                                  Virtual filesystem related to devices.
/tmp                                  Temporary files(automatically cleared)
/usr                                  User programs, Libraries, and documentation.
/var                                  variable data like logs, mail and spool files.


BASIC LINUX COMMANDS:
===== ** ==== ** ====

--> Now we created the file and inserted the data inside the file. Then I need to find the list of file in my server we use command.
syntax:
-------
ls                                   # To display all the files.
ls -l                                 # To display long-listed files.
ls -lh                                # To display all the files with human readable.
ls -lt                                # To display all the files in a table format.
ls -lr                                # To display all the files in a reverse format.
ls -lrth                              # To display all the files in a table format with human-readable with reverse format.
ls -lrth filename1/                   # To display the content inside the directory. 
ls -li                                # To display all the files with inode number.
ls -la                                # To display all the files including hidden files.
du -sh filename1                      # To check the size of the file.
du -sh *                              # To check the size of the all files.
df -hT                                # To check the disk usage.
date                                  # To check the date along with time.
cat /etc/os-release                   # To check the operating system.

AWK Command:
============
--> It is used to find the particular column in a table
syntax:
-------
cat filename1 | awk '{ print $1 }'


SYSTEM MONITORING && PERFORMANCE:
====== ========== ** ============

top                                   # Real-time process resource usage.
htop                                  # Interactive version of top.
vmstat                                # memory, process, I/O.
sar (System Activity Report)          # To check the CPU utilizations, loads.
free -m                               # To check the RAM Memory.
df -h                                 # To check server Memory.
who                                   # who login into server.
whoami                                # who login into server with date and time.
uptime                                # At what time user can login into server.
last                                  # how many users login into server since starting of the server.
lscpu                                 # To check the list of CPU's.
uname -r                              # To display kernel version.

NETWORKING:
===========
ip a                                  # To check Private Ip address.
curl ipinfo.io                        # To check the public Ip address.
curl ipconfig.io                      # To check the public Ip address.
ping google.com                       # Check the network connectivity with host.
traceroute  google.com                # To trace the path packets to take a host.
nslookup google.com                   # To DNS resolution check.
dig google.com                        # More detailed about o/p.
netstat -tulnp                        # To check the server listen ports.
wget https://example.com              # To download the data from browser.
curl https://example.com              # To View content from web-browser.


GREP:
====
grep -i "wordname" "filename"         # It is used to find the word name in particular file from outside of vi/vim Editor.
grep -in "wordname" "filename"        # It is used to find the particular word and shows line number with matches.
grep -ic "wordname" "filename"        # It is used to find the particular word and count the number of matches.
grep -r "wordname" "filename"         # It is used to find the particular word in Directory.
grep -iv "wordname" "filename"        # It shows lines that do not match (Invert match)
grep -w  "wordname" "filename"        # It shows the match whole word only.
grep -il "wordname" "filename"        # It shows only filename with matches.
grep -iA5 "wordname" "filename"       # It prints 5 lines after the matching.
grep -iB5 "wordname" "filename"       # It prints 5 lines before the matching.
grep -iC5 "wordname" "filename"       # It prints 5 line before & after the matching.
grep -iE  "dog|cat" "filename"        # It matches either "dog" or "cat".
grep -i "^wordname" "filename"        # It is a regular expression that matches the line which start with "word name".
grep -i "wordname$" "filename"        # It is a regular expression that matches the line which ends with "word name".

WORD COUNT (wc):
================
wc   filename1    # It will display no.of lines in a file along with no.of characters with no.of words.
wc -l filename1   # It will display no.of lines inside the file.
wc -c filename1   # It will display no.of characters inside the file.
wc -w filename1   # It will display no.of words inside the file.


FIND:
======
--> The "find" command searches for files and directories recursively in a directly hierarchy based on conditions like name, size, time, type, permissions and more

Common Examples:
----------------

Purpose                             |         Command
----------------------------------  | ------------------------------
find all files                      | find . -type f filename
find all directory                  | find . -type d directory name
find by path                        | find /path -name filename.txt
case insensitive search             | find . -iname readme.md
find by extension                   | find . -name "*.log"
find empty files                    | find . -type f -empty
find empty directories              | find . -type d -empty
find by size >10MB                  | find . -type f -size +10M
find files modified in last 1 day   | find . -mtime -1
find files deleted in last 1 day    | find . -mtime +1 -delete
find access files > 30 days ago     | find . -atime +30
If i want to find files inside root | find / -name file name
-----------------------------------------------------------------

FILE SYSTEMS:
===== ** ===== ** ======
TO Create a File In Linux  We Use Two Commands:-
They Are:
1) touch 
2) vim (or) vi Editor 

1) touch:
---------
--> touch is used to just create a file 

Syntax:
-------
--> If I want to create a single file we use command.
touch filename

--> If I want to create a two files we use command.
touch filename1 filename2

--> If I want to create a multiple files we use command.
touch filename1 filename2 filename3 

--> After Creating a File we need to enter the data inside the file we use command.

cat:
----
--> If I want to Insert a Single line inside the file we use command.
cat > filename1

--> If I want to Insert Multiple Lines inside the file we use command.
cat >> filename1

--> If I want to view content inside the file (or) Directory we use command.
cat filename1

--> If I want to overwrite the data in filename2 with filename1 we use command.
cat filename1 > filename2

--> If I want to add data to filename2 with filenmae1 we use command.
cat filenmae1 >> filename2

VIM (OR) VI EDITOR :
=== ** ==== ** =====
--> vim/vi is used to create the file along with we can insert the large amount of data at a time

Syntax:
-------
vim/vi filename4

Steps to use vim/vi Editor:
----------------------------
step-1:- Use vim/vi filename4
step-2:- Then Press "i" to get for insert mode.
step-3:- Then u can add the data whatever u want.
step-4:- After entering the data u need to press "Esc" to get out from Insert Mode.
step-5:- Then to Save the file we need to type ":wq!"(w-->save, q-->Exit) and get our from vi Editor.


--> If Suppose u enter a data in filename4 you want to add sl.no to inside the file then we use command
syntax:
-------
:set num
-->TO set sl.no.
:set nonum

--> If Suppose u enter a l000 lines of data to filenmae4 then u want to find 645 (or) any line we use command.
syntax:
-------
:645/Line number whatever u want.

--> If Suppose in filename4 I enter a mistake then I want to delete the line then we use command.
syntax:
-------
-- Go to Particular line using above command then Press "dd".

--> If Suppose u entered a wrong data in filename4 then u want to delete a whole data inside the file we use command.
syntax:
-------
>filename4
:%d

--> If Suppose u deleted a data inside the filename4 but u want to get back everything we use command.
syntax:
-------
:q!

--> If Suppose u want to find  any word inside the  filename4 from top to bottom we use command.
syntax:
-------
:/workname

--> If Suppose u want to find  any word inside the  filename4 from bottom to top we use command.
syntax:
------
:? workname

--> If Suppose u want to replace a any word in 3rd line  inside the file from vim/vi Editor we use command.
syntax:
-------
:3s/old name/newname

--> If Suppose u want to replace the any word inside the filename4 at a time we use command.
syntax:
-------
:%s/old name/newname


CREATION OF A DIRECTORY:
======== ** == ** ======
syntax:
-------
mkdir dir1     # In these it won't display the execution of created a dir1.
mkdir -v dir1  # v[verbose] will display after execution of command that it created a directory called dir1.
mkdir -p clgname/branches/sections/  # It will create the Parent directory.


--> we can create a more directory inside a directory using "mkdir" command.
--> If we want to display the hierarchy relation in directory we use command "tree".
--> Try to install tree using yum "install tree -y".
syntax:
--------
ls -lrth dir1/

USER & GROUP MANAGEMENT:
===== ** === ** ========
--> When we joined in a new Organization we need to create a User & add to a group & give permissions to user like root axis and other axis.
--> Run under a sudo axis.

user creation:
--------------
useradd -c "role" username.   # c-comment.

Ex:- useradd -c "software" suresh.

Deletion of user:
-----------------
userdel -d username

To check the  list of users:
----------------------------
cat /etc/passwd

user password:
----------------
passwd username

To check the list of Passwords:
-------------------------------
cat /etc/shadow

creation of group:
------------------
groupadd groupname

Deletion of a group:
-------------------
groupdel -d groupname

To check the list of groups:
----------------------------
cat /etc/group

Adding user to a group:
-----------------------
usermod -aG "groupname" username.

Removing user from a group:
---------------------------
gpasswd -d username groupname

To Check Group passwd:
------------------------
cat /etc/gshadow

How to lock the user:
---------------------
usermod -L username

How to unlock the user:
-----------------------
usermod -U username

--> If I want to give a user access by login into the server we use command.
cat /etc/ssh/sshd_config  -->move to line.no:63 -->change Authentication to "Yes" --> press :wq!

--> If I want to sudo access to user then we command.
vi sudo --> Move to line.no:100-->copy above line and add ALL.

PROCESS MANAGEMENT:
===================
Process:
--------
	A set of Instructions which executes the memory is known as Process.

-- PID - Process Id.
-- PPID - Parent Process Id.

It has six types. They are:-
1) Running Process
2) Stopping Process
3) Sleeping Process
4) Waiting Process
5) Zombie Process
6) Orphan Process

1) Running Process:
--------------------
	The process that is actively executing on the CPU.

Ex:- when you run a command like top, it is in the running state as long as it's on CPU.
----

2) Stopping Process:
--------------------
	The process that is temporarily stopped by a signal.

Ex:- ctr + z in the terminal pauses the foreground process. 
---- 

3) Sleeping Process:
---------------------
	The process that is currently not running but it is waiting for a resource or an event.

Ex:- A program waiting for a user i/p or file i/p.
----

4) Waiting Process:
--------------------
	 The process that is waiting for some resource or an event.

Ex:- A Program waiting for a user i/p or file i/p.
----

5) Zombie Process:
------------------
	 The Process is running when the child is present.

6) Orphan Process:
------------------
	The process is running when the parent is present.


Commands for Process Management:
-------------------------------

ps                   # Snapshots of current processes.
ps -ef               # parent-child relationship.
ps -aux              # A quick look at daemons and user process.

--> If I want to kill the process we use command.
kill -9 PPID


PACKAGE MANAGEMENT:
====== ** =========
--> Package Management refers to the process of installing, upgrading, configuring and removing software's on a system.
--> Different Linux distributions use different package managers and package formats.

| Distribution       | Package Format | Package Manager     |
| ------------------ | -------------- | ------------------- |
| Ubuntu/Debian      | `.deb`         | `apt`, `dpkg`       |
| RHEL/CentOS/Fedora | `.rpm`         | `yum`, `dnf`, `rpm` |
| Arch Linux         | -              | `pacman`            |
| SUSE               | `.rpm`         | `zypper`            |
-------------------------------------------------------------


-- Difference Between yum &  rpm

|      Features                 |                   yum                      |                   rpm                   |
|-----------------------------  |------------------------------------------- |---------------------------------------- |
| Full Form                     |  Yellow Dog Update Modifier                | Red hat Package Manager                 |
| Type                          |  High-level Package Manager                | Low-level package Manager               |
| Dependency Handling           |  Automatically Resolve the dependencies    | Doesn't handle the resolve dependencies |
| Data Rollback                 |  yum can rollback the data                 | rpm can't rollback the data             |        
| Update Support                |  support update packages                   | cannot support update pack              |
------------------------------------------------------------------------------------------------------------------------


-- Difference between Hard Link & Soft Link

|              Hard Link                               |                      Soft Link
|-----------------------------------------              -----------------------------------------------                                       
|- Hard link is the copied file of a selected files.   |- Soft link is a file point reference to a selected file. |
|- Hard link is not work for files.                    |- Soft link will work for both.                           |
|- Hard access the data available in a original file.  |- Soft Link can't access the data in a original file.     | 
|- If I deleted Parent file child file will be present.|- If I deleted the Parent file child file will be deleted.|
|- Inode numbers are same.                             |- Inode numbers are different.                            |
-------------------------------------------------------------------------------------------------------------------


SECURITY && PERMISSIONS:
======== ** ============

umask:- user file creation mode mask.

--> Default code for umask is 0022.
--> If u want u can change the Uumask like "umask 0222".
--> umask is a Linux command that sets default permissions for new files & directories.
--> umask number for Directories is "755"  & for files is "644".
--> To get this we have concept and some mathematical related.
--> The Base for directories is "0777" && for files is "0666".

      For Directories                   For Files
      ---------------                  -----------
         0 7 7 7                        0 6 6 6
         0 0 2 2                        0 0 2 2
         -------                        -------
         0 7 5 5                        0 6 4 4
         -------                        --------

--> If u create any directory by default u  will get permission like drwxr-xr-x.
--> If u create any file by default u will get permission like -rw-r--r--

Permission Type:
-----------------

-- r   - Read    - 4
-- w   - Write   - 2
-- x   - Execute - 1


User Type:
----------

u  - User
g  - Group
o  - Others


Changing Permissions:
---------------------

--> chmod  - Change Mode

chmod u+x filename1        # Add execute for user
chmod g-w filename2        # Remove write for group
chmod 755 myfile           # rwxr-xr-x


Change Ownerships:
------------------

--> chown  - change owner

chown root file.txt            # Change owner to root
chown user:group file.txt      # Change owner and group


CRON JOBS && SCHEDULING:
========= ** ===========

	Cron is a Linux utility used to schedule scripts or commands to run automatically at specific time or intervals.

Structure of a Cron Job:
------------------------

*  * * * * /path/to/command
â”‚ â”‚ â”‚ â”‚ â”‚
â”‚ â”‚ â”‚ â”‚ â””â”€ Day of week (0â€“7) (Sunday = 0 or 7)
â”‚ â”‚ â”‚ â””â”€â”€â”€ Month of Year(1â€“12)
â”‚ â”‚ â””â”€â”€â”€â”€â”€ Day of Month (1â€“31)
â”‚ â””â”€â”€â”€â”€â”€â”€â”€ Hour (0â€“23)
â””â”€â”€â”€â”€â”€â”€â”€â”€â”€ Minute (0â€“59)

Managing Cron Jobs:
===================

--> If you didn't install cronjob we command 

	sudo yum install cronie.service 

--> To view the list of cron Jobs we use command.
	
	crontab -l

--> To Sehedule the cron Jobs we use command.

	crontab -e

--> To Remove the cron Jobs we use command.

	crontab -r


Special Strings in Cron:
-------------------------

 String                                   Meaning
|-----------------------------------------------------------------|
| @reboot                                 Run at System Startup   |
|                                                                 |
| @daily                                  Once a day (0 0 * * *)  |
|                                                                 |
| @weekly                                 Once a week (0 0 * * 0) |
|                                                                 |
| @monthly                                Once a month (0 0 1 * *)|
|                                                                 |
| @yearly                                 Once a year (0 0 1 1 *) |
 -----------------------------------------------------------------
 

LINUX BOOT PROCESS && PATCHING:
================== ** =========


Linux kERNEL SYSTEM:
=====*======*========
	The Linux kernel is the core component of the Linux operating system. It acts as a bridge between hardware and software, managing system resources and providing services to user applications.

Types of Kernels:
------------------

| Type                  | Description                                                |
| --------------------- | ---------------------------------------------------------- |
| Monolithic Kernel     | Entire OS runs in a single address space. Linux uses this. |
| Microkernel           | Minimal services in kernel space; rest in user space.      |
| Hybrid Kernel         | Mix of both monolithic and microkernel (e.g., Windows NT). |
--------------------------------------------------------------------------------------

Main Responsibilities of the Kernel:
------------------------------------

| Function                   | Description                                         |
| -------------------------- | --------------------------------------------------- |
| Process Management         | Schedule processes, manage multitasking, priorities |
| Memory Management          | Handle RAM allocation, virtual memory, swap         |
| File System Management     | Read/write files, manage permissions, mount points  |
| Device Management          | Use device drivers to interact with hardware        |
| Networking                 | Enable communication between systems                |
| Security                   | User permissions, system calls, SELinux             |
------------------------------------------------------------------------------------

Kernel Components:
------------------

1. Process Scheduler â€“ Controls execution of processes

2. Memory Manager â€“ Allocates and frees memory

3. Virtual File System (VFS) â€“ Common interface for different file systems

4. Device Drivers â€“ Interface between kernel and hardware

5. Network Stack â€“ TCP/IP handling

6. System Call Interface (SCI) â€“ API for user apps to interact with the kernel


BACKUP & RECOVERY:
====== ** ========

What is Backup:
---------------
A backup is a copy of data stored in another location to protect against data loss due to:
  Hardware Failures
  Human Error
  Malware
  Accidental deletion

Types of Backups:
-----------------

| Type                       |                              Description                                                 |
| -------------------------- | ---------------------------------------------------------------------------------------- |
| Full Backup                | Backs up all data every time. Time-consuming and storage-heavy.                          |
| Incremental Backup         | Backs up changes since **last backup (full or incremental)**. Faster, uses less space.   |
| Differential Backup        | Backs up changes since **last full backup**. Quicker than full, larger than incremental. |
| Remote Backup              | Backup to remote server/cloud (e.g., using `rsync`, `scp`)                               |
-------------------------------------------------------------------------------------------------------------------------


Common Backup Tools in Linux:
-----------------------------

| Tool                           | Use Case                 | Description                                 |
| ------------------------------ | ------------------------ | ------------------------------------------- |
| `cp`                           | Simple copies            | Copies files/directories                    |
| `rsync`                        | Sync/backup              | Fast incremental backup tool                |
| `tar`                          | Archiving                | Creates compressed archives                 |
| `dd`                           | Disk imaging             | Makes bit-by-bit backup of disks/partitions |
| `scp` / `sftp`                 | Remote backups           | Copy files over SSH                         |
| `cron` + script                | Automation               | Schedule backup jobs                        |
| `dump` / `restore`             | Ext filesystem backup    | Used with ext2/ext3/ext4                    |
| `Timeshift`                    | GUI-based system restore | Popular on desktops (like System Restore)   |
| `Bacula`, `Amanda`, `BackupPC` | Enterprise backup        | Advanced open-source backup software        |
-----------------------------------------------------------------------------------------------------------


Backup Examples:
----------------

Using tar (Archive Backup):
---------------------------
syntax:
-------
	tar -cvpzf /backup/home_backup.tar.gz /home

c = create, v = verbose, p = preserve permissions, z = gzip, f = filename


Using rsync (Sync Backup):
--------------------------
syntax:
-------
	rsync -avh /home/ /backup/home/

a = archive, v = verbose, h = human-readable


Remote Backup via scp:
-----------------------
syntax:
-------
	scp -r /var/log user@192.168.1.10:/backup/logs/

What is Recovery?:
------------------
Recovery means restoring data from a backup in case of data loss.

Recovery Examples:
------------------
Restore from tar:
-----------------
	tar -xvpzf /backup/home_backup.tar.gz -C /

Restore with rsync:
-------------------
	rsync -avh /backup/home/ /home/

Backup Best Practices:
----------------------

--> Use incremental or differential backups to save time and space.
--> Store backups in multiple locations (external drive + cloud).
--> Test your backups regularly.
--> Automate with cron and scripts.
--> Secure backups using encryption and access controls.
--> Use rsnapshot, borg, or restic for advanced and encrypted backups.

Key Commands Summary:
---------------------

| Command        | Description                   |
| -------------- | ----------------------------- |
| `tar`          | Archive and compress          |
| `rsync`        | Efficient incremental backup  |
| `dd`           | Disk-level backup             |
| `scp`          | Secure copy to/from remote    |
| `cron`         | Schedule backup jobs          |
| `restore`      | Restore from dump files       |
| `lsblk` / `df` | Verify mount points and space |
--------------------------------------------------



IMPORTANT PORT NUMBERS:
=======================

|Port  | Protocol | Service Name             | Description                              |
| ---- | -------- | ------------------------ | ---------------------------------------- |
| 20   | TCP      | FTP (Data Transfer)      | File Transfer Protocol â€“ Data port       |
| 21   | TCP      | FTP (Control)            | File Transfer Protocol â€“ Command port    |
| 22   | TCP      | SSH                      | Secure Shell for remote login            |
| 23   | TCP      | Telnet                   | Insecure remote login (rarely used)      |
| 25   | TCP      | SMTP                     | Email sending (Simple Mail Transfer)     |
| 53   | UDP/TCP  | DNS                      | Domain Name System (resolves names)      |
| 67   | UDP      | DHCP (Server)            | Dynamic Host Configuration Protocol      |
| 68   | UDP      | DHCP (Client)            | DHCP client requests                     |
| 69   | UDP      | TFTP                     | Trivial File Transfer Protocol           |
| 80   | TCP      | HTTP                     | Web traffic (insecure)                   |
| 110  | TCP      | POP3                     | Email retrieval                          |
| 123  | UDP      | NTP                      | Network Time Protocol                    |
| 143  | TCP      | IMAP                     | Email retrieval (more modern)            |
| 161  | UDP      | SNMP                     | Network management                       |
| 162  | UDP      | SNMP Trap                | SNMP alerts                              |
| 389  | TCP/UDP  | LDAP                     | Directory service                        |
| 443  | TCP      | HTTPS                    | Secure web traffic                       |
| 445  | TCP      | SMB / CIFS               | Windows file sharing (used in Samba)     |
| 514  | UDP      | Syslog                   | Logging services                         |
| 587  | TCP      | SMTP (secure submission) | Encrypted email sending                  |
| 636  | TCP      | LDAPS                    | Secure LDAP                              |
| 993  | TCP      | IMAPS                    | Secure IMAP                              |
| 995  | TCP      | POP3S                    | Secure POP3                              |
| 1433 | TCP      | Microsoft SQL Server     | Database access                          |
| 1521 | TCP      | Oracle DB                | Oracle database access                   |
| 2049 | TCP/UDP  | NFS                      | Network File System                      |
| 3306 | TCP      | MySQL                    | MySQL database                           |
| 3389 | TCP      | RDP                      | Remote Desktop Protocol                  |
| 5432 | TCP      | PostgreSQL               | PostgreSQL database                      |
| 5601 | TCP      | Kibana                   | Web UI for Elasticsearch                 |
| 6379 | TCP      | Redis                    | In-memory key-value store                |
| 8080 | TCP      | HTTP-Alt / Tomcat        | Alternate HTTP port / Application server |
| 8443 | TCP      | HTTPS-Alt                | Alternate secure HTTP                    |
| 9200 | TCP      | Elasticsearch            | REST API for Elasticsearch               |
-----------------------------------------------------------------------------------------




DISK MANAGEMENT:
=================

	Disk management involves viewing, creating, resizing, formatting, mounting, and managing disks and partitions.

Check Disk Information:
-----------------------
	lsblk

Detailed Disk Info:
-------------------
	fdisk -l

Show Filesystem Usage:
----------------------
	df -h       # human-readable
        df -Th      # includes filesystem types


Disk Space Usage:
------------------

	du -sh /path/to/folder    # shows space used by folder


Creating and Managing Partitions:
---------------------------------

Partition a Disk:
-----------------

	sudo fdisk/dev/xvdb

Common options:
----------------

n â†’ new partition

p â†’ print partition table

d â†’ delete partition

w â†’ write and save changes

q â†’ quit without saving


Alternative Partitioning Tools:
-------------------------------

parted â€“ modern alternative to fdisk

gparted â€“ GUI-based partition manager


Formatting Partitions:
----------------------

mkfs.ext4 /dev/sdXn      # format partition as ext4
mkfs.xfs /dev/sdXn       # format partition as xfs
mkfs.vfat /dev/sdXn      # for FAT32/USB devices


Mounting and Unmounting:
--------------------------

Create Mount Directory:
-----------------------
	mkdir /mnt/data

Mount a Partition:
------------------
	mount /dev/sdxn/ mnt/data

Unmount a Partition:
--------------------

	unmount /mnt/data

Logical Volume Management (LVM):
--------------------------------

LVM allows dynamic resizing and combining of disks.

Basic Steps:
------------
	
pvcreate /dev/sdX
vgcreate my_vg /dev/sdX
lvcreate -L 10G -n my_lv my_vg
mkfs.ext4 /dev/my_vg/my_lv
mount /dev/my_vg/my_lv /mnt


Disk Usage Monitoring Tools:
----------------------------

| Tool       | Purpose                   |
| ---------- | ------------------------- |
| `df -h`    | Show disk usage per mount |
| `du -sh *` | Space used by folders     |
| `lsblk`    | Block devices & structure |
| `iostat`   | Disk I/O performance      |
| `iotop`    | Real-time disk activity   |
| `ncdu`     | Visual disk usage viewer  |
------------------------------------------


Permanent mount:
----------------
	vim /etc/fstab

/dev/sdxn/ mnt/data xfs defaults 0 0

==================**END**================== 
























